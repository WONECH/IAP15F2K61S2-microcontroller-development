C51 COMPILER V9.54   MAIN                                                                  03/31/2023 22:50:02 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <STC15F2K60S2.H>
   2          #include "iic.h"
   3          
   4          unsigned char code duanma_nixie[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E
             -,0x79,0x71};
   5          unsigned char code duanma_nixie_dot[] = {0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};
   6          float vain3 = 0;
   7          int vain3_int1 = 0;
   8          unsigned char view = 1;
   9          float vp = 0;
  10          int vp_int1 = 0;
  11          unsigned int count = 0;
  12          unsigned char count_state = 0;//用于作为count是否需要加1的判据
  13          unsigned char LED_state = 0xff;
  14          unsigned char count_t = 0;//定时计数
  15          unsigned char count_f = 0;//无效按键操作计数
  16          
  17          void select_573(unsigned char y)
  18          {
  19   1        switch(y)
  20   1        {
  21   2          case 4:P2 = (P2 & 0x1f) | 0x80;break;
  22   2          case 5:P2 = (P2 & 0x1f) | 0xa0;break;
  23   2          case 6:P2 = (P2 & 0x1f) | 0xc0;break;
  24   2          case 7:P2 = (P2 & 0x1f) | 0xe0;break;
  25   2        }
  26   1      }
  27          
  28          void read_24c02()
  29          {
  30   1        IIC_Start(); 
  31   1        IIC_SendByte(0xa0); 
  32   1        IIC_WaitAck(); 
  33   1        IIC_SendByte(0x00); 
  34   1        IIC_WaitAck(); 
  35   1        IIC_Stop(); 
  36   1        
  37   1        IIC_Start(); 
  38   1        IIC_SendByte(0xa1); 
  39   1        IIC_WaitAck(); 
  40   1        vp = IIC_RecByte();
  41   1        IIC_SendAck(1);
  42   1        IIC_Stop();
  43   1      }
  44          
  45          void init_sys()
  46          {
  47   1        select_573(4);
  48   1        P0 = 0xff;
  49   1        select_573(7);
  50   1        P0 = 0xff;
  51   1        select_573(5);
  52   1        P0 = 0x00;
  53   1        read_24c02();
C51 COMPILER V9.54   MAIN                                                                  03/31/2023 22:50:02 PAGE 2   

  54   1      }
  55          
  56          void delay_nixie(unsigned char t)
  57          {
  58   1        while(t--);
  59   1      }
  60          
  61          void display_bit_nixie(unsigned char pos , unsigned char value)
  62          {
  63   1        select_573(7);
  64   1        P0 = 0xff;
  65   1        select_573(6);
  66   1        P0 = 0x01 << pos;
  67   1        select_573(7);
  68   1        P0 = value;
  69   1        delay_nixie(500);
  70   1      }
  71          
  72          void read_8592()
  73          {
  74   1        IIC_Start(); 
  75   1        IIC_SendByte(0x90); 
  76   1        IIC_WaitAck(); 
  77   1        IIC_SendByte(0x03); 
  78   1        IIC_WaitAck(); 
  79   1        IIC_Stop(); 
  80   1        
  81   1        IIC_Start(); 
  82   1        IIC_SendByte(0x91); 
  83   1        IIC_WaitAck(); 
  84   1        vain3 = IIC_RecByte();
  85   1        IIC_SendAck(1);
  86   1        IIC_Stop();
  87   1        
  88   1        vain3 = vain3 / 51;
  89   1      }
  90          
  91          void display_nixie()
  92          {
  93   1        if(view == 1)
  94   1        {
  95   2          display_bit_nixie(0 , ~0x3E);
  96   2          display_bit_nixie(1 , 0xff);
  97   2          display_bit_nixie(2 , 0xff);
  98   2          display_bit_nixie(3 , 0xff);
  99   2          display_bit_nixie(4 , 0xff);
 100   2          vain3_int1 = vain3 * 100;
 101   2          display_bit_nixie(5 , ~duanma_nixie_dot[vain3_int1 / 100]);
 102   2          display_bit_nixie(6 , ~duanma_nixie[(vain3_int1 % 100) / 10]);
 103   2          display_bit_nixie(7 , ~duanma_nixie[vain3_int1 % 10]);
 104   2          select_573(7);
 105   2          P0 = 0xff;
 106   2        }
 107   1        else if(view == 2)
 108   1        {
 109   2          display_bit_nixie(0 , ~0x73);
 110   2          display_bit_nixie(1 , 0xff);
 111   2          display_bit_nixie(2 , 0xff);
 112   2          display_bit_nixie(3 , 0xff);
 113   2          display_bit_nixie(4 , 0xff);
 114   2          vp_int1 = vp * 10;
 115   2          display_bit_nixie(5 , ~duanma_nixie_dot[vp_int1 / 100]);
C51 COMPILER V9.54   MAIN                                                                  03/31/2023 22:50:02 PAGE 3   

 116   2          display_bit_nixie(6 , ~duanma_nixie[(vp_int1 % 100) / 10]);
 117   2          display_bit_nixie(7 , ~duanma_nixie[vp_int1 % 10]);
 118   2          select_573(7);
 119   2          P0 = 0xff;
 120   2        }
 121   1        else
 122   1        {
 123   2          display_bit_nixie(0 , ~0x37);
 124   2          display_bit_nixie(1 , 0xff);
 125   2          display_bit_nixie(2 , 0xff);
 126   2          display_bit_nixie(3 , 0xff);
 127   2          display_bit_nixie(4 , 0xff);
 128   2          if(count > 99)
 129   2          {
 130   3            display_bit_nixie(5 , ~duanma_nixie_dot[count / 100]);
 131   3            display_bit_nixie(6 , ~duanma_nixie[(count % 100) / 10]);
 132   3            display_bit_nixie(7 , ~duanma_nixie[count % 10]);
 133   3          }
 134   2          else if(count > 9)
 135   2          {
 136   3            display_bit_nixie(5 , 0xff);
 137   3            display_bit_nixie(6 , ~duanma_nixie[count / 10]);
 138   3            display_bit_nixie(7 , ~duanma_nixie[count % 10]);
 139   3          }
 140   2          else
 141   2          {
 142   3            display_bit_nixie(5 , 0xff);
 143   3            display_bit_nixie(6 , 0xff);
 144   3            display_bit_nixie(7 , ~duanma_nixie[count]);
 145   3          }
 146   2          select_573(7);
 147   2          P0 = 0xff;
 148   2        }
 149   1      }
 150          
 151          void change_count()
 152          {
 153   1        if((vain3 * 10) > vp)
 154   1        {
 155   2          count_state = 1;
 156   2          TR0 = 1;
 157   2        }
 158   1        else
 159   1        {
 160   2          if(count_state)
 161   2            count++;
 162   2          count_state = 0;
 163   2          TR0 = 0;
 164   2        }
 165   1      }
 166          
 167          void Timer0Init()   //50毫秒@12.000MHz
 168          {
 169   1        AUXR &= 0x7F;   //定时器时钟12T模式
 170   1        TMOD &= 0xF0;   //设置定时器模式
 171   1        TL0 = 0xB0;   //设置定时初值
 172   1        TH0 = 0x3C;   //设置定时初值
 173   1        TF0 = 0;    //清除TF0标志
 174   1        TR0 = 0;    //定时器0开始计时
 175   1        EA = 1;
 176   1        ET0 = 1;
 177   1      }
C51 COMPILER V9.54   MAIN                                                                  03/31/2023 22:50:02 PAGE 4   

 178          
 179          void t0_routine() interrupt 1
 180          {
 181   1        if(++count_t == 100)
 182   1        {
 183   2          LED_state = LED_state & 0xfe;
 184   2          select_573(4);
 185   2          P0 = LED_state;
 186   2          count_t = 0;
 187   2          TR0 = 0;
 188   2        }
 189   1      }
 190          
 191          void LEDworking()
 192          {
 193   1        if(!count_state)
 194   1        {
 195   2          LED_state = LED_state | 0x01;
 196   2          select_573(4);
 197   2          P0 = LED_state;
 198   2        }
 199   1        if(count % 2 == 0)
 200   1        {
 201   2          LED_state = LED_state | 0x02;
 202   2          select_573(4);
 203   2          P0 = LED_state;
 204   2        }
 205   1        else
 206   1        {
 207   2          LED_state = LED_state & 0xfd;
 208   2          select_573(4);
 209   2          P0 = LED_state;
 210   2        }
 211   1        if(count_f >= 3)
 212   1        {
 213   2          LED_state = LED_state & 0xfb;
 214   2          select_573(4);
 215   2          P0 = LED_state;
 216   2        }
 217   1        else
 218   1        {
 219   2          LED_state = LED_state | 0x04;
 220   2          select_573(4);
 221   2          P0 = LED_state;
 222   2        }
 223   1      }
 224          
 225          void write_24c02()
 226          {
 227   1        IIC_Start(); 
 228   1        IIC_SendByte(0xa0); 
 229   1        IIC_WaitAck(); 
 230   1        IIC_SendByte(0x00); 
 231   1        IIC_WaitAck(); 
 232   1        IIC_SendByte(vp); 
 233   1        IIC_WaitAck(); 
 234   1        IIC_Stop(); 
 235   1      }
 236          
 237          void scankey()
 238          {
 239   1        P32=P33=P34=1;
C51 COMPILER V9.54   MAIN                                                                  03/31/2023 22:50:02 PAGE 5   

 240   1        P35 = 0;
 241   1        if(P33 == 0)          //S12
 242   1        {
 243   2          delay_nixie(100);
 244   2          if(P33 == 0)
 245   2          {
 246   3            if(view == 1)
 247   3            {
 248   4              count_f = 0;
 249   4              view = 2;
 250   4            }
 251   3            else if(view == 2)
 252   3            {
 253   4              write_24c02();
 254   4              view = 3;
 255   4              count_f = 0;
 256   4            }
 257   3            else
 258   3            {
 259   4              count_f = 0;
 260   4              view = 1;
 261   4            }
 262   3            while(P33 == 0)
 263   3            {
 264   4              read_8592();
 265   4              display_nixie();
 266   4              LEDworking();
 267   4              change_count();
 268   4            }
 269   3          }
 270   2        }
 271   1        if(P32 == 0)          //S13
 272   1        {
 273   2          delay_nixie(100);
 274   2          if(P32 == 0)
 275   2          {
 276   3            if(view == 3)
 277   3            {
 278   4              count_f = 0;
 279   4              count = 0;
 280   4            }
 281   3            else
 282   3              count_f++;
 283   3            while(P32 == 0)
 284   3            {
 285   4              read_8592();
 286   4              display_nixie();
 287   4              LEDworking();
 288   4              change_count();
 289   4            }
 290   3          }
 291   2        }
 292   1        
 293   1        P32=P33=P35=1;
 294   1        P34 = 0;
 295   1        if(P33 == 0)          //S16
 296   1        {
 297   2          delay_nixie(100);
 298   2          if(P33 == 0)
 299   2          {
 300   3            if(view == 2)
 301   3            {
C51 COMPILER V9.54   MAIN                                                                  03/31/2023 22:50:02 PAGE 6   

 302   4              vp += 5;
 303   4              count_f = 0;
 304   4              if(vp > 50)
 305   4              {
 306   5                vp = 0;
 307   5              }
 308   4            }
 309   3            else
 310   3              count_f++;
 311   3            while(P33 == 0)
 312   3            {
 313   4              read_8592();
 314   4              display_nixie();
 315   4              LEDworking();
 316   4              change_count();
 317   4            }
 318   3          }
 319   2        }
 320   1        if(P32 == 0)          //S17
 321   1        {
 322   2          delay_nixie(100);
 323   2          if(P32 == 0)
 324   2          {
 325   3            if(view == 2)
 326   3            {
 327   4              count_f = 0;
 328   4              vp -= 5;
 329   4              if(vp < 0)
 330   4              {
 331   5                vp =50;
 332   5              }
 333   4            }
 334   3            else
 335   3              count_f++;
 336   3            while(P32 == 0)
 337   3            {
 338   4              read_8592();
 339   4              display_nixie();
 340   4              LEDworking();
 341   4              change_count();
 342   4            }
 343   3          }
 344   2        }
 345   1      }
 346          
 347          void main()
 348          {
 349   1        init_sys();
 350   1        Timer0Init();
 351   1        while(1)
 352   1        {
 353   2          read_8592();
 354   2          display_nixie();
 355   2          LEDworking();
 356   2          change_count();
 357   2          scankey();
 358   2        }
 359   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1265    ----
C51 COMPILER V9.54   MAIN                                                                  03/31/2023 22:50:02 PAGE 7   

   CONSTANT SIZE    =     27    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
