C51 COMPILER V9.54   14447021                                                              06/09/2023 20:38:16 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE 14447021
OBJECT MODULE PLACED IN .\Objects\14447021.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE 14447021.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -14447021.lst) TABS(2) OBJECT(.\Objects\14447021.obj)

line level    source

   1          #include <STC15F2K60S2.H>
   2          #include "iic.h"
   3          #include "onewire.h"
   4          #include "intrins.h"
   5          #include "stdio.h"
   6          void DAC_output();
   7          unsigned char duanma_nixie[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79
             -,0x71};
   8          unsigned char duanma_nixie_dot[] = {0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};
   9          unsigned int temp = 0 , distance = 0 , count_chg = 0;
  10          unsigned char view = 1 , view1 = 1 , view2 = 1 , t_p = 30 , d_p = 35 , count_L = 0 , count_H = 0 , TFlag =
             - 0 , DAC = 1 , count = 0 , count_t = 0 ;
  11          char t_p_w = 0 , d_p_w = 0;
  12          unsigned char datnum[8], posnum[8] , nixie_i = 0 , count_nixie = 0, count_sonic = 0;
  13          
  14          void delay(unsigned char t)
  15          {
  16   1        while(t--);
  17   1      }
  18          
  19          void select573(unsigned char channel)
  20          {
  21   1        switch(channel)
  22   1        {
  23   2          case 0: P2 = (P2 & 0x1f) | 0x00;break;
  24   2          case 4: P2 = (P2 & 0x1f) | 0x80;break;
  25   2          case 5: P2 = (P2 & 0x1f) | 0xa0;break;
  26   2          case 6: P2 = (P2 & 0x1f) | 0xc0;break;
  27   2          case 7: P2 = (P2 & 0x1f) | 0xe0;break;
  28   2        }
  29   1      }
  30          
  31          void display_bit_nixie(unsigned char pos , unsigned char value)
  32          {
  33   1        select573(7);
  34   1        P0 = 0xff;
  35   1        select573(6);
  36   1        P0 = 0x01 << pos;
  37   1        select573(7);
  38   1        P0 = value;
  39   1        select573(0);
  40   1      }
  41          
  42          void rd18b20()
  43          {
  44   1        unsigned char MSB , LSB;
  45   1        init_ds18b20();
  46   1        Write_DS18B20(0xcc);
  47   1        Write_DS18B20(0x44);
  48   1        init_ds18b20();
  49   1        Write_DS18B20(0xcc);
  50   1        Write_DS18B20(0xbe);
  51   1        LSB = Read_DS18B20();
  52   1        MSB = Read_DS18B20();
C51 COMPILER V9.54   14447021                                                              06/09/2023 20:38:16 PAGE 2   

  53   1        temp = MSB;
  54   1        temp = (temp<<8) | LSB;
  55   1        temp = (temp>>4) * 100;
  56   1        temp += (LSB & 0x0f) * 6.25;
  57   1      }
  58          
  59          void Delay12us()    //@12.000MHz
  60          {
  61   1        unsigned char i;
  62   1      
  63   1        _nop_();
  64   1        _nop_();
  65   1        i = 33;
  66   1        while (--i);
  67   1      }
  68          
  69          void sendwave()
  70          {
  71   1        unsigned char i = 0;
  72   1        for(;i<8;i++)
  73   1        {
  74   2          P10 = 1;
  75   2          Delay12us();
  76   2          P10 = 0;
  77   2          Delay12us();
  78   2        }
  79   1      }
  80          
  81          void Timer0Init()   //1毫秒@12.000MHz
  82          {
  83   1        AUXR &= 0x7F;   //定时器时钟12T模式
  84   1        TMOD &= 0xF0;   //设置定时器模式
  85   1        TL0 = 0x18;   //设置定时初值
  86   1        TH0 = 0xFC;   //设置定时初值
  87   1        TF0 = 0;    //清除TF0标志
  88   1        TR0 = 1;    
  89   1        EA = 1;
  90   1        ET0 = 1;
  91   1      }
  92          
  93          void t0_routine() interrupt 1
  94          {
  95   1        display_bit_nixie(nixie_i , datnum[nixie_i]);
  96   1        if(++nixie_i >= 8) nixie_i = 0;
  97   1        count_sonic++;
  98   1      }
  99          
 100          void sonic()
 101          {
 102   1        CMOD = 0x00;
 103   1        CL = 0x00;    //设置定时初值
 104   1        CH = 0x00;    //设置定时初值
 105   1        sendwave();
 106   1        CR = 1;
 107   1        while((TF0 == 0) && (P11 == 1));
 108   1        CR = 0;
 109   1        if(CF == 1)
 110   1        {
 111   2          distance = 999;
 112   2          CF = 0;
 113   2        }
 114   1        else
C51 COMPILER V9.54   14447021                                                              06/09/2023 20:38:16 PAGE 3   

 115   1        {
 116   2          distance = (CH<<8) | CL;
 117   2          distance = distance*0.017;
 118   2        }
 119   1      }
 120          
 121          void display_nixie()
 122          {
 123   1        if(view == 1)
 124   1        {
 125   2          if(view1 == 1)
 126   2          {
 127   3            datnum[0] = ~duanma_nixie[12];
 128   3            datnum[1] = 0xff;
 129   3            datnum[2] = 0xff;
 130   3            datnum[3] = 0xff;
 131   3            datnum[4] = ~duanma_nixie[temp/1000];
 132   3            datnum[5] = ~duanma_nixie_dot[temp%1000/100];
 133   3            datnum[6] = ~duanma_nixie[temp%100/10];
 134   3            datnum[7] = ~duanma_nixie[temp%10];
 135   3          }
 136   2          else if(view1 == 2)
 137   2          {
 138   3            datnum[0] = ~0x38;
 139   3            datnum[1] = 0xff;
 140   3            datnum[2] = 0xff;
 141   3            datnum[3] = 0xff;
 142   3            datnum[4] = 0xff;
 143   3            datnum[5] = 0xff;
 144   3            datnum[6] = ~duanma_nixie[distance/10];
 145   3            datnum[7] = ~duanma_nixie[distance%10];
 146   3          }
 147   2          else
 148   2          {
 149   3            datnum[0] = ~0x67;
 150   3            datnum[1] = 0xff;
 151   3            datnum[2] = 0xff;
 152   3            if(count_chg>9999)
 153   3              datnum[3] = ~duanma_nixie[count_chg/10000];
 154   3            else
 155   3              datnum[3] = 0xff;
 156   3            if(count_chg>999)
 157   3              datnum[4] = ~duanma_nixie[count_chg%10000/1000];
 158   3            else
 159   3              datnum[4] = 0xff;
 160   3            if(count_chg>99)
 161   3              datnum[5] = ~duanma_nixie[count_chg%1000/100];
 162   3            else
 163   3              datnum[5] = 0xff;
 164   3            if(count_chg>9)
 165   3              datnum[6] = ~duanma_nixie[count_chg%100/10];
 166   3            else
 167   3              datnum[6] = 0xff;
 168   3            datnum[7] = ~duanma_nixie[count_chg%10];
 169   3          }
 170   2        }
 171   1        else
 172   1        {
 173   2          if(view2 == 1)
 174   2          {
 175   3            datnum[0] = ~0x73;
 176   3            datnum[1] = 0xff;
C51 COMPILER V9.54   14447021                                                              06/09/2023 20:38:16 PAGE 4   

 177   3            datnum[2] = 0xff;
 178   3            datnum[3] = ~duanma_nixie[1];
 179   3            datnum[4] = 0xff;
 180   3            datnum[5] = 0xff;
 181   3            datnum[6] = ~duanma_nixie[(t_p+t_p_w)/10];
 182   3            datnum[7] = ~duanma_nixie[(t_p+t_p_w)%10];
 183   3          }
 184   2          else
 185   2          {
 186   3            datnum[0] = ~0x73;
 187   3            datnum[1] = 0xff;
 188   3            datnum[2] = 0xff;
 189   3            datnum[3] = ~duanma_nixie[2];
 190   3            datnum[4] = 0xff;
 191   3            datnum[5] = 0xff;
 192   3            datnum[6] = ~duanma_nixie[(d_p+d_p_w)/10];
 193   3            datnum[7] = ~duanma_nixie[(d_p+d_p_w)%10];
 194   3          }
 195   2        }
 196   1      }
 197          
 198          void rd24c02()
 199          {
 200   1        I2CStart();
 201   1        I2CSendByte(0xa0);
 202   1        I2CWaitAck();
 203   1        I2CSendByte(0x01);
 204   1        I2CWaitAck();
 205   1        I2CStart();
 206   1        I2CSendByte(0xa1);
 207   1        I2CWaitAck();
 208   1        count_L = I2CReceiveByte();
 209   1        I2CSendAck(1);
 210   1        I2CStop();
 211   1        
 212   1        I2CStart();
 213   1        I2CSendByte(0xa0);
 214   1        I2CWaitAck();
 215   1        I2CSendByte(0x02);
 216   1        I2CWaitAck();
 217   1        I2CStart();
 218   1        I2CSendByte(0xa1);
 219   1        I2CWaitAck();
 220   1        count_chg = I2CReceiveByte();
 221   1        I2CSendAck(1);
 222   1        I2CStop();
 223   1        
 224   1        count_chg = (count_chg << 8) | count_L;
 225   1      }
 226          
 227          void wt24c02()
 228          {
 229   1        I2CStart();
 230   1        I2CSendByte(0xa0);
 231   1        I2CWaitAck();
 232   1        I2CSendByte(0x01);
 233   1        I2CWaitAck();
 234   1        I2CSendByte(count_L);
 235   1        I2CWaitAck();
 236   1        I2CStop();
 237   1        
 238   1        rd18b20();
C51 COMPILER V9.54   14447021                                                              06/09/2023 20:38:16 PAGE 5   

 239   1        display_nixie();
 240   1        sonic();
 241   1        DAC_output();
 242   1        
 243   1        I2CStart();
 244   1        I2CSendByte(0xa0);
 245   1        I2CWaitAck();
 246   1        I2CSendByte(0x02);
 247   1        I2CWaitAck();
 248   1        I2CSendByte(count_H);
 249   1        I2CWaitAck();
 250   1        I2CStop();
 251   1      }
 252          
 253          void Timer1Init()   //50毫秒@12.000MHz
 254          {
 255   1        AUXR &= 0xBF;   //定时器时钟12T模式
 256   1        TMOD &= 0x0F;   //设置定时器模式
 257   1        TL1 = 0xB0;   //设置定时初值
 258   1        TH1 = 0x3C;   //设置定时初值
 259   1        TF1 = 0;    //清除TF1标志
 260   1        TR1 = 0;
 261   1        EA = 1;
 262   1        ET1 = 1;
 263   1      }
 264          
 265          void t1_routine() interrupt 3
 266          {
 267   1        if(++count >= 20)
 268   1        {
 269   2          count = 0;
 270   2          TFlag = 1;
 271   2        }
 272   1      }
 273          
 274          void dac(unsigned char output)
 275          {
 276   1        I2CStart();
 277   1        I2CSendByte(0x90);
 278   1        I2CWaitAck();
 279   1        I2CSendByte(0x40);
 280   1        I2CWaitAck();
 281   1        I2CSendByte(output);
 282   1        I2CWaitAck();
 283   1        I2CStop();
 284   1      }
 285          
 286          void DAC_output()
 287          {
 288   1        if(DAC == 1)
 289   1        {
 290   2          if(distance > d_p)
 291   2            dac(4*51);
 292   2          else
 293   2            dac(2*51);
 294   2        }
 295   1        else
 296   1        {
 297   2          dac(20);//0.39V
 298   2        }
 299   1      }
 300          
C51 COMPILER V9.54   14447021                                                              06/09/2023 20:38:16 PAGE 6   

 301          void scankey()
 302          {
 303   1        P35=0;
 304   1        P32=P33=P34=1;
 305   1        if(P32 == 0) //13
 306   1        {
 307   2          delay(100);
 308   2          if(P32 == 0)
 309   2          {
 310   3            TL1 = 0xB0;   //设置定时初值
 311   3            TH1 = 0x3C;   //设置定时初值
 312   3            count = 0;
 313   3            TR1 = 1;
 314   3            while((P32 == 0)&&(TFlag == 0))
 315   3            {
 316   4              rd18b20();
 317   4              display_nixie();
 318   4              sonic();
 319   4              DAC_output();
 320   4            }
 321   3            TR1 = 0;
 322   3            if(TFlag == 0)
 323   3            {
 324   4              if(view == 1)
 325   4              {
 326   5                view = 2;
 327   5                view1 = 1;
 328   5              }
 329   4              else
 330   4              {
 331   5                view = 1;
 332   5                view2 = 1;
 333   5                if((d_p_w != 0) || (t_p_w !=0))
 334   5                {
 335   6                  d_p+=d_p_w;
 336   6                  t_p+=t_p_w;
 337   6                  d_p_w = 0;
 338   6                  t_p_w = 0;
 339   6                  count_chg++;
 340   6                  count_H = (count_chg>>8);
 341   6                  count_L = (count_chg & 0x00ff);
 342   6                  wt24c02();
 343   6                }
 344   5              }
 345   4            }
 346   3            else
 347   3            {
 348   4              TFlag = 0;
 349   4              if(DAC == 0)
 350   4                DAC = 1;
 351   4              else
 352   4                DAC = 0;
 353   4            }
 354   3          }
 355   2        }
 356   1        if(P33 == 0) //12
 357   1        {
 358   2          delay(100);
 359   2          if(P33 == 0)
 360   2          {
 361   3            TL1 = 0xB0;   //设置定时初值
 362   3            TH1 = 0x3C;   //设置定时初值
C51 COMPILER V9.54   14447021                                                              06/09/2023 20:38:16 PAGE 7   

 363   3            count = 0;
 364   3            TR1 = 1;
 365   3            while((P33 == 0)&&(TFlag == 0))
 366   3            {
 367   4              rd18b20();
 368   4              display_nixie();
 369   4              sonic();
 370   4              DAC_output();
 371   4            }
 372   3            TR1 = 0;
 373   3            if(TFlag == 0)
 374   3            {
 375   4              if(view == 1)
 376   4              {
 377   5                if(view1 == 1)
 378   5                {
 379   6                  view1 = 2;
 380   6                }
 381   5                else if(view1 == 2)
 382   5                {
 383   6                  view1 = 3;
 384   6                }
 385   5                else
 386   5                {
 387   6                  view1 = 1;
 388   6                }
 389   5              }
 390   4              else
 391   4              {
 392   5                if(view2 == 1)
 393   5                {
 394   6                  view2 = 2;
 395   6                }
 396   5                else
 397   5                {
 398   6                  view2 = 1;
 399   6                }
 400   5              }
 401   4            }
 402   3            else
 403   3            {
 404   4              TFlag = 0;
 405   4              count_chg = 0;
 406   4              wt24c02();
 407   4            }
 408   3          }
 409   2        }
 410   1        P34=0;
 411   1        P32=P33=P35=1;
 412   1        if(P32 == 0) //17
 413   1        {
 414   2          delay(100);
 415   2          if(P32 == 0)
 416   2          {
 417   3            if(view == 2)
 418   3            {
 419   4              if(view2 == 1)
 420   4              {
 421   5                if((t_p+t_p_w+2) <= 99)
 422   5                {
 423   6                  t_p_w += 2;
 424   6                }
C51 COMPILER V9.54   14447021                                                              06/09/2023 20:38:16 PAGE 8   

 425   5              }
 426   4              else
 427   4              {
 428   5                if((d_p+d_p_w+5) <= 99)
 429   5                {
 430   6                  d_p_w += 5;
 431   6                }
 432   5              }
 433   4            }
 434   3            while(P32 == 0)
 435   3            {
 436   4              rd18b20();
 437   4              display_nixie();
 438   4              sonic();
 439   4              DAC_output();
 440   4      
 441   4            }
 442   3          }
 443   2        }
 444   1        if(P33 == 0) //16
 445   1        {
 446   2          delay(100);
 447   2          if(P33 == 0)
 448   2          {
 449   3            if(view == 2)
 450   3            {
 451   4              if(view2 == 1)
 452   4              {
 453   5                if((t_p+t_p_w-2) >= 0)
 454   5                {
 455   6                  t_p_w -= 2;
 456   6                }
 457   5              }
 458   4              else
 459   4              {
 460   5                if((d_p+d_p_w-5) >= 0)
 461   5                {
 462   6                  d_p_w -= 5;
 463   6                }
 464   5              }
 465   4            }
 466   3            while(P33 == 0)
 467   3            {
 468   4              rd18b20();
 469   4              display_nixie();
 470   4              sonic();
 471   4              DAC_output();
 472   4            }
 473   3          }
 474   2        }
 475   1      }
 476          
 477          void init_sys()
 478          {
 479   1        select573(7);
 480   1        P0 = 0xff;
 481   1        select573(4);
 482   1        P0 = 0xff;
 483   1        select573(5);
 484   1        P0 = 0x00;
 485   1        Timer0Init();
 486   1        Timer1Init();
C51 COMPILER V9.54   14447021                                                              06/09/2023 20:38:16 PAGE 9   

 487   1        rd24c02();
 488   1      }
 489          
 490          void main()
 491          {
 492   1        init_sys();
 493   1        while(1)
 494   1        {
 495   2          rd18b20();
 496   2          display_nixie();
 497   2          if(count_sonic >= 200)
 498   2          {
 499   3            sonic();
 500   3            count_sonic = 0;
 501   3          }
 502   2          DAC_output();
 503   2          scankey();
 504   2        }
 505   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1625    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     65       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
